{"remainingRequest":"D:\\NUS\\Year 4\\Sem 1\\CG4002\\Dashboard\\dancedashboard\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\NUS\\Year 4\\Sem 1\\CG4002\\Dashboard\\dancedashboard\\src\\components\\DancerInformation.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\NUS\\Year 4\\Sem 1\\CG4002\\Dashboard\\dancedashboard\\src\\components\\DancerInformation.vue","mtime":1601949618305},{"path":"D:\\NUS\\Year 4\\Sem 1\\CG4002\\Dashboard\\dancedashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\NUS\\Year 4\\Sem 1\\CG4002\\Dashboard\\dancedashboard\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\NUS\\Year 4\\Sem 1\\CG4002\\Dashboard\\dancedashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\NUS\\Year 4\\Sem 1\\CG4002\\Dashboard\\dancedashboard\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DancerInformation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8MA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DancerInformation.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-container>\r\n    <div style=\"width: 20%; float: left\">\r\n      <psnd />\r\n    </div>\r\n    <div style=\"width: 80%; float: right\">\r\n      <v-row>\r\n        <v-col class=\"mx-auto\" md=\"3\">\r\n          <v-select\r\n            v-model=\"selectedChart\"\r\n            :items=\"chartType\"\r\n            item-text=\"name\"\r\n            item-value=\"value\"\r\n            filled\r\n            label=\"Chart Type\"\r\n            background-color=\"#A9D66E\"\r\n            prepend-icon=\"mdi-view-dashboard\"\r\n            clearable\r\n            dense\r\n            color=\"#000000\"\r\n            @input=\"selectChart\"\r\n            @click:clear=\"clearCharts\"\r\n          />\r\n        </v-col>\r\n        <v-col class=\"mx-auto\" md=\"3\">\r\n          <v-select\r\n            v-model=\"selectedDancers\"\r\n            :items=\"dancers\"\r\n            item-text=\"name\"\r\n            item-value=\"value\"\r\n            filled\r\n            label=\"Dancer(s)\"\r\n            background-color=\"#00D19C\"\r\n            prepend-icon=\"mdi-account-multiple\"\r\n            clearable\r\n            multiple\r\n            dense\r\n            color=\"#000000\"\r\n            @input=\"selectDancers\"\r\n            @click:clear=\"clearDancers\"\r\n          />\r\n        </v-col>\r\n        <v-col class=\"mx-auto\" md=\"4\">\r\n          <v-menu\r\n            v-model=\"dateMenu\"\r\n            :nudge-right=\"40\"\r\n            :close-on-content-click=\"false\"\r\n            transition=\"scale-transition\"\r\n            offset-y\r\n            max-width=\"290px\"\r\n            min-width=\"290px\"\r\n          >\r\n            <template v-slot:activator=\"{ on }\">\r\n              <v-text-field\r\n                label=\"Choose a Range of Dates\"\r\n                :value=\"dateDisp\"\r\n                v-on=\"on\"\r\n                clearable\r\n                background-color=\"#3DDBD8\"\r\n                prepend-icon=\"mdi-calendar\"\r\n                filled\r\n                dense\r\n                color=\"#000000\"\r\n                @click:clear=\"clearDates\"\r\n              />\r\n            </template>\r\n            <v-date-picker\r\n              v-model=\"dateVal\"\r\n              @click:date=\"selectDates\"\r\n              :max=\"getEndDate\"\r\n              range\r\n            />\r\n          </v-menu>\r\n        </v-col>\r\n        <v-col class=\"mx-auto\" md=\"1\">\r\n          <v-btn icon color=\"green\" fab outlined @click=\"submit\">\r\n            <v-icon>mdi-check</v-icon>\r\n          </v-btn>\r\n        </v-col>\r\n      </v-row>\r\n      <!-- if page is loaded, have time spent, number of sets done and displaying current week data -->\r\n      <template v-if=\"loaded && haveTime && haveSet && haveCurrentWeek\">\r\n        <v-row>\r\n          <v-card width=\"49%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\">\r\n              Time Spent (Minutes) vs Dancers\r\n            </v-card-title>\r\n            <p align=\"center\">{{ currentWeek }}</p>\r\n            <BarChartTime :chartData=\"timeChartArray\" />\r\n          </v-card>\r\n          <v-spacer />\r\n          <v-card width=\"49%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\">\r\n              Number of Dance Sets vs Dancers\r\n            </v-card-title>\r\n            <p align=\"center\">{{ currentWeek }}</p>\r\n            <BarChartSet :chartData=\"setChartArray\" />\r\n          </v-card>\r\n        </v-row>\r\n      </template>\r\n      <!-- if page is loaded, have time spent, number of sets done and not displaying current week data -->\r\n      <template v-else-if=\"loaded && haveTime && haveSet && !haveCurrentWeek\">\r\n        <v-row>\r\n          <v-card width=\"49%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\"\r\n              >Time Spent (Minutes) vs Dancers</v-card-title\r\n            >\r\n            <p align=\"center\">{{ rangeOfDates }}</p>\r\n            <BarChartTime :chartData=\"timeChartArray\" />\r\n          </v-card>\r\n          <v-spacer />\r\n          <v-card width=\"49%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\"\r\n              >Number of Dance Sets vs Dancers</v-card-title\r\n            >\r\n            <p align=\"center\">{{ rangeOfDates }}</p>\r\n            <BarChartSet :chartData=\"setChartArray\" />\r\n          </v-card>\r\n        </v-row>\r\n      </template>\r\n      <!-- if page is loaded, have time spent, no number of sets data and displaying current week data -->\r\n      <template v-else-if=\"loaded && haveTime && !haveSet && haveCurrentWeek\">\r\n        <v-row>\r\n          <v-card width=\"100%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\">\r\n              Time Spent (Minutes) vs Dancers\r\n            </v-card-title>\r\n            <p align=\"center\">{{ currentWeek }}</p>\r\n            <BarChartTime :chartData=\"timeChartArray\" />\r\n          </v-card>\r\n        </v-row>\r\n      </template>\r\n      <!-- if page is loaded, have time spent, no number of sets done and not displaying current week data -->\r\n      <template v-else-if=\"loaded && haveTime && !haveSet && !haveCurrentWeek\">\r\n        <v-row>\r\n          <v-card width=\"100%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\"\r\n              >Time Spent (Minutes) vs Dancers</v-card-title\r\n            >\r\n            <p align=\"center\">{{ rangeOfDates }}</p>\r\n            <BarChartTime :chartData=\"timeChartArray\" />\r\n          </v-card>\r\n        </v-row>\r\n      </template>\r\n      <!-- if page is loaded, no time spent data, have number of sets done and displaying current week data -->\r\n      <template v-else-if=\"loaded && !haveTime && haveSet && haveCurrentWeek\">\r\n        <v-row>\r\n          <v-card width=\"100%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\"\r\n              >Number of Dance Sets vs Dancers\r\n            </v-card-title>\r\n            <p align=\"center\">{{ currentWeek }}</p>\r\n            <BarChartSet :chartData=\"setChartArray\" />\r\n          </v-card>\r\n        </v-row>\r\n      </template>\r\n      <!-- if page is loaded, no time spent data, number of sets done and not displaying current week data -->\r\n      <template v-else-if=\"loaded && !haveTime && haveSet && !haveCurrentWeek\">\r\n        <v-row>\r\n          <v-card width=\"100%\" class=\"mx-auto\">\r\n            <v-card-title class=\"justify-center\"\r\n              >Number of Dance Sets vs Dancers</v-card-title\r\n            >\r\n            <p align=\"center\">{{ rangeOfDates }}</p>\r\n            <BarChartSet :chartData=\"setChartArray\" />\r\n          </v-card>\r\n        </v-row>\r\n      </template>\r\n      <!-- if page is loaded, no time spent and number of sets done data -->\r\n      <template v-else-if=\"loaded && !haveTime && !haveSet\">\r\n        <v-row>\r\n          <v-card\r\n            class=\"mx-auto\"\r\n            width=\"60%\"\r\n            height=\"160\"\r\n            color=\"#ECEFF1\"\r\n            rounded\r\n          >\r\n            <v-card-title>\r\n              <v-row align=\"center\" justify=\"center\">\r\n                <v-icon light large center>mdi-emoticon-sad</v-icon>\r\n              </v-row>\r\n            </v-card-title>\r\n            <p class=\"text-center\">\r\n              What you are looking for cannot be found.\r\n              <br />Sorry!\r\n            </p>\r\n          </v-card>\r\n        </v-row>\r\n      </template>\r\n      <template v-else>\r\n        <v-row justify=\"center\">\r\n          <v-progress-circular\r\n            indeterminate\r\n            :size=\"70\"\r\n            :width=\"7\"\r\n            color=\"#FF9800\"\r\n          />\r\n        </v-row>\r\n      </template>\r\n      <br />\r\n    </div>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport psnd from \"./PersistentSideNavDrawer\";\r\nimport Swal from \"sweetalert2\";\r\nimport BarChartSet from \"./Charts/BarChartSet\";\r\nimport BarChartTime from \"./Charts/BarChartTime\";\r\n\r\nexport default {\r\n  name: \"Dancers\",\r\n\r\n  components: {\r\n    psnd,\r\n    BarChartSet,\r\n    BarChartTime,\r\n  },\r\n\r\n  data: () => ({\r\n    selectedChart: null,\r\n    chartType: [\r\n      { name: \"Time Spent\", value: \"Time Bar\" },\r\n      { name: \"Sets Done\", value: \"Set Bar\" },\r\n    ],\r\n    selectedDancers: null,\r\n    dancers: [\r\n      { name: \"Jingxuan\", value: \"Jingxuan\" },\r\n      { name: \"Karan\", value: \"Karan\" },\r\n      { name: \"Kexin\", value: \"Kexin\" },\r\n      { name: \"Sarah\", value: \"Sarah\" },\r\n      { name: \"Tristy\", value: \"Tristy\" },\r\n      { name: \"Yunhan\", value: \"Yunhan\" },\r\n    ],\r\n    dateMenu: false,\r\n    dateVal: null,\r\n    getEndDate: new Date().toISOString().substr(0, 10),\r\n    haveTime: true,\r\n    haveSet: true,\r\n    timeChartArray: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: \"Time Spent\",\r\n          borderWidth: 1,\r\n          backgroundColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n          ],\r\n          pointBorderColor: \"#2554FF\",\r\n          data: null,\r\n        },\r\n      ],\r\n    },\r\n    currentWeek: null,\r\n    haveCurrentWeek: false,\r\n    rangeOfDates: null,\r\n    setChartArray: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: \"Number of Sets\",\r\n          borderWidth: 1,\r\n          backgroundColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n          ],\r\n          pointBorderColor: \"#2554FF\",\r\n          data: null,\r\n        },\r\n      ],\r\n    },\r\n    loaded: false,\r\n  }),\r\n  computed: {\r\n    dateDisp() {\r\n      return this.dateVal;\r\n    },\r\n  },\r\n  methods: {\r\n    clearCharts: function () {\r\n      this.selectedChart = null;\r\n    },\r\n    selectChart: function () {\r\n      if (this.selectedChart != null) {\r\n        if (this.selectedChart === \"Table\") {\r\n          console.log(\"get data from Dance\");\r\n        } else if (this.selectedChart === \"Pie\") {\r\n          console.log(\"get data from Sync\");\r\n        }\r\n      } else {\r\n        console.log(\"get data from Dance and Sync\");\r\n      }\r\n    },\r\n    clearDancers: function () {\r\n      this.selectedDancers = null;\r\n    },\r\n    selectDancers: function () {\r\n      if (this.selectedDancers != null && this.selectedDancers.length > 0) {\r\n        console.log(this.selectedDancers.length);\r\n        for (var i = 0; i < this.selectedDancers.length; i++) {\r\n          console.log(this.selectedDancers[i]);\r\n        }\r\n      } else {\r\n        this.selectedDancers = null;\r\n      }\r\n    },\r\n    clearDates: function () {\r\n      this.dateVal = null;\r\n    },\r\n    selectDates: function () {\r\n      if (this.dateVal != null) {\r\n        console.log(this.dateVal.length);\r\n        for (var j = 0; j < this.dateVal.length; j++) {\r\n          console.log(this.dateVal[j]);\r\n        }\r\n      } else {\r\n        console.log(\"display all dates\");\r\n      }\r\n    },\r\n    submit: function () {\r\n      // data in selectedDancers are to be taken as OR\r\n      // data in dateVal is to be taken as OR\r\n      // selectedChart refers to the DB Table (Time Bar: DailyTracker, Set Bar: DailySet)\r\n      // SELECT * FROM DailyTracker/DailySet WHERE (this.selectedDancers) AND (this.dateVal)\r\n      let checkCorrectData = 1;\r\n      if (this.selectedDancers != null) {\r\n        this.selectedDancers = this.selectedDancers.sort();\r\n        var dancers = '\"';\r\n        for (var i = 0; i < this.selectedDancers.length; i++) {\r\n          dancers += this.selectedDancers[i] + \",\";\r\n        }\r\n        dancers = dancers.slice(0, -1);\r\n        dancers += '\"';\r\n      } else {\r\n        dancers = null;\r\n      }\r\n\r\n      if (this.dateVal != null) {\r\n        if (this.dateVal.length == 1) {\r\n          // no range of dates provided, show error message\r\n          checkCorrectData = 0;\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Oops...\",\r\n            text: \"Please provide a range of dates (minimum 5 days).\",\r\n          });\r\n          this.clearDates();\r\n        } else {\r\n          console.log(this.dateVal);\r\n          this.dateVal = this.dateVal.sort();\r\n          let startDate = new Date(this.dateVal[0]);\r\n          let endDate = new Date(this.dateVal[1]);\r\n          let diff = endDate - startDate;\r\n\r\n          console.log(\"Diff: \" + diff);\r\n          // if range of dates is less than 5 days, show error message\r\n          if (diff < 345600000) {\r\n            checkCorrectData = 0;\r\n            Swal.fire({\r\n              icon: \"error\",\r\n              title: \"Oops...\",\r\n              text: \"The range of dates should have a minimum of 5 days.\",\r\n            });\r\n            this.clearDates();\r\n          } else {\r\n            var dates = '\"' + this.dateVal[0] + \",\" + this.dateVal[1] + '\"';\r\n          }\r\n        }\r\n      } else {\r\n        dates = null;\r\n      }\r\n\r\n      // if all data entered (if any) are correct, then post data to server\r\n      if (checkCorrectData == 1) {\r\n        const dancerDataToSend =\r\n          '{\"chart\":\"' +\r\n          this.selectedChart +\r\n          '\", ' +\r\n          '\"dancers\":' +\r\n          dancers +\r\n          ', \"dates\":' +\r\n          dates +\r\n          \"}\";\r\n        // console.log(dancerDataToSend);\r\n        var jsonDancerDataToSend = JSON.parse(dancerDataToSend);\r\n        console.log(\r\n          \"Dancer Data To Send: \" + JSON.stringify(jsonDancerDataToSend)\r\n        );\r\n\r\n        axios\r\n          .post(\"/dashboard/dancers\", {\r\n            dancerData: jsonDancerDataToSend,\r\n          })\r\n          .then((response) => {\r\n            console.log(\"Time length: \" + response.data.timeData.length);\r\n            console.log(\"Set length: \" + response.data.setData.length);\r\n            this.haveTime = false;\r\n            this.haveSet = false;\r\n            this.loaded = false;\r\n            this.timeChartArray = {};\r\n            this.setChartArray = {};\r\n            let labelForCharts = [];\r\n\r\n            if (this.dateVal == null) {\r\n              // no dates selected means show current week\r\n              this.haveCurrentWeek = true;\r\n            } else {\r\n              // show data for specific range of dates\r\n              this.haveCurrentWeek = false;\r\n              let startDate = new Date(this.dateVal[0]);\r\n              let startDate_split = startDate.toString().split(\" \");\r\n              startDate =\r\n                startDate_split[2] +\r\n                \" \" +\r\n                startDate_split[1] +\r\n                \" \" +\r\n                startDate_split[3];\r\n              let endDate = new Date(this.dateVal[1]);\r\n              let endDate_split = endDate.toString().split(\" \");\r\n              endDate =\r\n                endDate_split[2] +\r\n                \" \" +\r\n                endDate_split[1] +\r\n                \" \" +\r\n                endDate_split[3];\r\n              this.rangeOfDates = startDate + \" - \" + endDate;\r\n            }\r\n\r\n            // if have specific dancers selected, then labels must change accordingly\r\n            // to show only those dancers' names\r\n            if (this.selectedDancers != null) {\r\n              for (let i = 0; i < this.selectedDancers.length; i++) {\r\n                labelForCharts.push(this.selectedDancers[i]);\r\n              }\r\n            } else {\r\n              // show all names\r\n              labelForCharts = [\r\n                \"Jingxuan\",\r\n                \"Karan\",\r\n                \"Kexin\",\r\n                \"Sarah\",\r\n                \"Tristy\",\r\n                \"Yunhan\",\r\n              ];\r\n            }\r\n            if (\r\n              response.data.timeData.length != undefined &&\r\n              response.data.setData.length != undefined\r\n            ) {\r\n              // have both time spent and number of sets data, then set the data for both\r\n              // in timeChartArray and setChartArray\r\n              let timeChartData = [];\r\n              for (let j = 0; j < response.data.timeData.length; j++) {\r\n                // null means no data available for that person\r\n                if (response.data.timeData[j].sum == null) {\r\n                  timeChartData.push(0);\r\n                } else {\r\n                  timeChartData.push(parseInt(response.data.timeData[j].sum));\r\n                }\r\n              }\r\n              // check if all data for time is 0\r\n              let countTime = 0;\r\n              for (let k = 0; k < timeChartData.length; k++) {\r\n                if (timeChartData[k] == 0) {\r\n                  countTime++;\r\n                }\r\n              }\r\n\r\n              let setChartData = [];\r\n              for (let k = 0; k < response.data.setData.length; k++) {\r\n                setChartData.push(parseInt(response.data.setData[k].count));\r\n              }\r\n\r\n              // check if all data for number of sets is 0\r\n              let countSet = 0;\r\n              for (let j = 0; j < setChartData.length; j++) {\r\n                if (setChartData[j] == 0) {\r\n                  countSet++;\r\n                }\r\n              }\r\n              if (countTime == timeChartData.length) {\r\n                // if all 0, then that means no data available for what was requested\r\n                this.haveTime = false;\r\n              } else {\r\n                this.haveTime = true;\r\n                let chartArrayTime = {\r\n                  labels: labelForCharts,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Time Spent\",\r\n                      borderWidth: 1,\r\n                      backgroundColor: [\r\n                        \"rgba(255, 99, 132, 1)\",\r\n                        \"rgba(255, 159, 64, 1)\",\r\n                        \"rgba(255, 206, 86, 1)\",\r\n                        \"rgba(54, 162, 235, 1)\",\r\n                        \"rgba(75, 192, 192, 1)\",\r\n                        \"rgba(153, 102, 255, 1)\",\r\n                      ],\r\n                      borderColor: [\r\n                        \"rgba(255, 99, 132, 1)\",\r\n                        \"rgba(255, 159, 64, 1)\",\r\n                        \"rgba(255, 206, 86, 1)\",\r\n                        \"rgba(54, 162, 235, 1)\",\r\n                        \"rgba(75, 192, 192, 1)\",\r\n                        \"rgba(153, 102, 255, 1)\",\r\n                      ],\r\n                      pointBorderColor: \"#2554FF\",\r\n                      data: timeChartData,\r\n                    },\r\n                  ],\r\n                };\r\n                this.timeChartArray = chartArrayTime;\r\n              }\r\n\r\n              if (countSet == setChartData.length) {\r\n                // if all 0, then that means no data available for what was requested\r\n                this.haveSet = false;\r\n              } else {\r\n                this.haveSet = true;\r\n                let chartArraySet = {\r\n                  labels: labelForCharts,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Number of Sets\",\r\n                      borderWidth: 1,\r\n                      backgroundColor: [\r\n                        \"rgba(255, 99, 132, 1)\",\r\n                        \"rgba(255, 159, 64, 1)\",\r\n                        \"rgba(255, 206, 86, 1)\",\r\n                        \"rgba(54, 162, 235, 1)\",\r\n                        \"rgba(75, 192, 192, 1)\",\r\n                        \"rgba(153, 102, 255, 1)\",\r\n                      ],\r\n                      borderColor: [\r\n                        \"rgba(255, 99, 132, 1)\",\r\n                        \"rgba(255, 159, 64, 1)\",\r\n                        \"rgba(255, 206, 86, 1)\",\r\n                        \"rgba(54, 162, 235, 1)\",\r\n                        \"rgba(75, 192, 192, 1)\",\r\n                        \"rgba(153, 102, 255, 1)\",\r\n                      ],\r\n                      pointBorderColor: \"#2554FF\",\r\n                      data: setChartData,\r\n                    },\r\n                  ],\r\n                };\r\n                this.setChartArray = chartArraySet;\r\n              }\r\n              this.loaded = true;\r\n            } else if (\r\n              response.data.timeData.length != undefined &&\r\n              response.data.setData.length == undefined\r\n            ) {\r\n              let timeChartData = [];\r\n              for (let j = 0; j < response.data.timeData.length; j++) {\r\n                if (response.data.timeData[j].sum == null) {\r\n                  timeChartData.push(0);\r\n                } else {\r\n                  timeChartData.push(parseInt(response.data.timeData[j].sum));\r\n                }\r\n              }\r\n              let countTime = 0;\r\n              for (let k = 0; k < timeChartData.length; k++) {\r\n                if (timeChartData[k] == 0) {\r\n                  countTime++;\r\n                }\r\n              }\r\n              console.log(\"Label: \" + labelForCharts);\r\n              console.log(\"Time: \" + timeChartData);\r\n              let chartArrayTime = {\r\n                labels: labelForCharts,\r\n                datasets: [\r\n                  {\r\n                    label: \"Time Spent\",\r\n                    borderWidth: 1,\r\n                    backgroundColor: [\r\n                      \"rgba(255, 99, 132, 1)\",\r\n                      \"rgba(255, 159, 64, 1)\",\r\n                      \"rgba(255, 206, 86, 1)\",\r\n                      \"rgba(54, 162, 235, 1)\",\r\n                      \"rgba(75, 192, 192, 1)\",\r\n                      \"rgba(153, 102, 255, 1)\",\r\n                    ],\r\n                    borderColor: [\r\n                      \"rgba(255, 99, 132, 1)\",\r\n                      \"rgba(255, 159, 64, 1)\",\r\n                      \"rgba(255, 206, 86, 1)\",\r\n                      \"rgba(54, 162, 235, 1)\",\r\n                      \"rgba(75, 192, 192, 1)\",\r\n                      \"rgba(153, 102, 255, 1)\",\r\n                    ],\r\n                    pointBorderColor: \"#2554FF\",\r\n                    data: timeChartData,\r\n                  },\r\n                ],\r\n              };\r\n              this.timeChartArray = chartArrayTime;\r\n              if (countTime == timeChartData.length) {\r\n                this.haveTime = false;\r\n              } else {\r\n                this.haveTime = true;\r\n              }\r\n              this.haveSet = false;\r\n              this.loaded = true;\r\n            } else if (\r\n              response.data.timeData.length == undefined &&\r\n              response.data.setData.length != undefined\r\n            ) {\r\n              // have number of sets done data only\r\n              let setChartData = [];\r\n              for (let k = 0; k < response.data.setData.length; k++) {\r\n                setChartData.push(parseInt(response.data.setData[k].count));\r\n              }\r\n              // check if all data is 0\r\n              let countSet = 0;\r\n              for (let j = 0; j < setChartData.length; j++) {\r\n                if (setChartData[j] == 0) {\r\n                  countSet++;\r\n                }\r\n              }\r\n\r\n              this.haveTime = false;\r\n\r\n              if (countSet == setChartData.length) {\r\n                // if all data is 0, taken to be no data available for the conditions given\r\n                this.haveSet = false;\r\n              } else {\r\n                this.haveSet = true;\r\n                let chartArraySet = {\r\n                  labels: labelForCharts,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Number of Sets\",\r\n                      borderWidth: 1,\r\n                      backgroundColor: [\r\n                        \"rgba(255, 99, 132, 1)\",\r\n                        \"rgba(255, 159, 64, 1)\",\r\n                        \"rgba(255, 206, 86, 1)\",\r\n                        \"rgba(54, 162, 235, 1)\",\r\n                        \"rgba(75, 192, 192, 1)\",\r\n                        \"rgba(153, 102, 255, 1)\",\r\n                      ],\r\n                      borderColor: [\r\n                        \"rgba(255, 99, 132, 1)\",\r\n                        \"rgba(255, 159, 64, 1)\",\r\n                        \"rgba(255, 206, 86, 1)\",\r\n                        \"rgba(54, 162, 235, 1)\",\r\n                        \"rgba(75, 192, 192, 1)\",\r\n                        \"rgba(153, 102, 255, 1)\",\r\n                      ],\r\n                      pointBorderColor: \"#2554FF\",\r\n                      data: setChartData,\r\n                    },\r\n                  ],\r\n                };\r\n                this.setChartArray = chartArraySet;\r\n              }\r\n              this.loaded = true;\r\n            } else {\r\n              // no time spent or number of sets done data available\r\n              this.haveTime = false;\r\n              this.haveSet = false;\r\n              this.loaded = true;\r\n            }\r\n            console.log(\"Have Time: \" + this.haveTime);\r\n            console.log(\"Have Set: \" + this.haveSet);\r\n            console.dir(this.timeChartArray);\r\n            console.dir(this.setChartArray);\r\n          });\r\n      }\r\n    },\r\n    fetchSetData: async function () {\r\n      // get number of sets done data for each of the dancers for the current week\r\n      const response = await axios.get(\"/dashboard/dancers\");\r\n      console.log(response.data.timeData);\r\n      console.log(response.data.setData);\r\n      let setChartData = [];\r\n      for (let i = 0; i < response.data.setData.length; i++) {\r\n        setChartData.push(parseInt(response.data.setData[i].count));\r\n      }\r\n      console.log(setChartData);\r\n      let chartArraySet = {\r\n        labels: [\"Jingxuan\", \"Karan\", \"Kexin\", \"Sarah\", \"Tristy\", \"Yunhan\"],\r\n        datasets: [\r\n          {\r\n            label: \"Number of Sets\",\r\n            borderWidth: 1,\r\n            backgroundColor: [\r\n              \"rgba(255, 99, 132, 1)\",\r\n              \"rgba(255, 159, 64, 1)\",\r\n              \"rgba(255, 206, 86, 1)\",\r\n              \"rgba(54, 162, 235, 1)\",\r\n              \"rgba(75, 192, 192, 1)\",\r\n              \"rgba(153, 102, 255, 1)\",\r\n            ],\r\n            borderColor: [\r\n              \"rgba(255, 99, 132, 1)\",\r\n              \"rgba(255, 159, 64, 1)\",\r\n              \"rgba(255, 206, 86, 1)\",\r\n              \"rgba(54, 162, 235, 1)\",\r\n              \"rgba(75, 192, 192, 1)\",\r\n              \"rgba(153, 102, 255, 1)\",\r\n            ],\r\n            pointBorderColor: \"#2554FF\",\r\n            data: setChartData,\r\n          },\r\n        ],\r\n      };\r\n      return chartArraySet;\r\n    },\r\n    fetchTimeData: async function () {\r\n      // get time spent dancing data for each of the dancers for the current week\r\n      const response = await axios.get(\"/dashboard/dancers\");\r\n      console.log(response.data.timeData);\r\n      let timeChartData = [];\r\n      for (let i = 0; i < response.data.timeData.length; i++) {\r\n        if (response.data.timeData[i].sum == null) {\r\n          timeChartData.push(0);\r\n        } else {\r\n          timeChartData.push(parseInt(response.data.timeData[i].sum));\r\n        }\r\n      }\r\n      console.log(timeChartData);\r\n      let chartArrayTime = {\r\n        labels: [\"Jingxuan\", \"Karan\", \"Kexin\", \"Sarah\", \"Tristy\", \"Yunhan\"],\r\n        datasets: [\r\n          {\r\n            label: \"Time Spent\",\r\n            borderWidth: 1,\r\n            backgroundColor: [\r\n              \"rgba(255, 99, 132, 1)\",\r\n              \"rgba(255, 159, 64, 1)\",\r\n              \"rgba(255, 206, 86, 1)\",\r\n              \"rgba(54, 162, 235, 1)\",\r\n              \"rgba(75, 192, 192, 1)\",\r\n              \"rgba(153, 102, 255, 1)\",\r\n            ],\r\n            borderColor: [\r\n              \"rgba(255, 99, 132, 1)\",\r\n              \"rgba(255, 159, 64, 1)\",\r\n              \"rgba(255, 206, 86, 1)\",\r\n              \"rgba(54, 162, 235, 1)\",\r\n              \"rgba(75, 192, 192, 1)\",\r\n              \"rgba(153, 102, 255, 1)\",\r\n            ],\r\n            pointBorderColor: \"#2554FF\",\r\n            data: timeChartData,\r\n          },\r\n        ],\r\n      };\r\n      return chartArrayTime;\r\n    },\r\n  },\r\n  // used to send an HTTP request to fetch data that the component will then render\r\n  async mounted() {\r\n    this.loaded = false;\r\n    try {\r\n      // get number of sets data for each dancer for the current week\r\n      const setData = await this.fetchSetData();\r\n      this.setChartArray = setData;\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    try {\r\n      // get time spent practicing data for each dancer for the current week\r\n      const timeData = await this.fetchTimeData();\r\n      this.timeChartArray = timeData;\r\n      this.loaded = true;\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // get the dates for Monday and Sunday of the current week in DD Month name YYYY format\r\n    // for readability purpose e.g 28 Sep 2020\r\n    // store the current week information in this.currentWeek and set this.haveCurrentWeek to true\r\n    var date = new Date();\r\n    var diff = date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1);\r\n    var mondayDate = new Date(date.setDate(diff));\r\n    mondayDate = mondayDate.toString();\r\n    mondayDate = new Date(mondayDate);\r\n    // console.log(\"MON DATE: \" + mondayDate);\r\n    var sundayDate = new Date(date.setDate(diff + 6));\r\n    sundayDate = sundayDate.toString();\r\n    sundayDate = new Date(sundayDate);\r\n    // console.log(\"SUN DATE: \" + sundayDate);\r\n\r\n    let mondayDate_split = mondayDate.toString().split(\" \");\r\n    mondayDate =\r\n      mondayDate_split[2] +\r\n      \" \" +\r\n      mondayDate_split[1] +\r\n      \" \" +\r\n      mondayDate_split[3];\r\n\r\n    let sundayDate_split = sundayDate.toString().split(\" \");\r\n    sundayDate =\r\n      sundayDate_split[2] +\r\n      \" \" +\r\n      sundayDate_split[1] +\r\n      \" \" +\r\n      sundayDate_split[3];\r\n\r\n    var sundayDateCheckDD = sundayDate_split[2];\r\n    var mondayDateCheckDD = mondayDate_split[2];\r\n    if (parseInt(sundayDateCheckDD) < parseInt(mondayDateCheckDD)) {\r\n      var sundayDateCheckMM = sundayDate_split[1];\r\n      var sundayDateCheckYYYY = parseInt(sundayDate_split[3]);\r\n\r\n      if (sundayDateCheckMM == \"Jan\") sundayDateCheckMM = \"Feb\";\r\n      else if (sundayDateCheckMM == \"Feb\") sundayDateCheckMM = \"Mar\";\r\n      else if (sundayDateCheckMM == \"Mar\") sundayDateCheckMM = \"Apr\";\r\n      else if (sundayDateCheckMM == \"Apr\") sundayDateCheckMM = \"May\";\r\n      else if (sundayDateCheckMM == \"May\") sundayDateCheckMM = \"Jun\";\r\n      else if (sundayDateCheckMM == \"Jun\") sundayDateCheckMM = \"Jul\";\r\n      else if (sundayDateCheckMM == \"Jul\") sundayDateCheckMM = \"Aug\";\r\n      else if (sundayDateCheckMM == \"Aug\") sundayDateCheckMM = \"Sep\";\r\n      else if (sundayDateCheckMM == \"Sep\") sundayDateCheckMM = \"Oct\";\r\n      else if (sundayDateCheckMM == \"Oct\") sundayDateCheckMM = \"Nov\";\r\n      else if (sundayDateCheckMM == \"Nov\") sundayDateCheckMM = \"Dec\";\r\n      else if (sundayDateCheckMM == \"Dec\") {\r\n        sundayDateCheckMM = \"Jan\";\r\n        sundayDateCheckYYYY += 1;\r\n      }\r\n\r\n      sundayDate =\r\n        sundayDateCheckDD + \" \" + sundayDateCheckMM + \" \" + sundayDateCheckYYYY;\r\n    }\r\n    console.log(\"Monday Date: \" + mondayDate);\r\n    console.log(\"Sunday Date: \" + sundayDate);\r\n    this.currentWeek = mondayDate + \" - \" + sundayDate;\r\n    this.haveCurrentWeek = true;\r\n  },\r\n};\r\n</script>\r\n"]}]}